;; Transposes the matrix: [[a b] [c d]] to [[a c] [b d]]
(define (_transpose m)
  (apply map list m))

;; Deletes resources ignoring errors
(define (safe-delete id)
  (try (delete id)
       (catch e
         (log-info (str "Error deleting resource " id " ignored:" e))
         false)))

;; Check that the objective field exists and is a categorical field
(define (check-cat fields objective-field)
  (let (field (find-field fields objective-field))
    (when (not (find-field fields objective-field))
      (raise {"message" (str "The objective field "
                             objective-field
                             " cannot be found in this dataset")
              "code" 100}))
    (when (not (categorical-field? field))
      (raise {"message" (str "The objective field "
                             objective-field
                             " is not a categorical field."
                             " Only categorical fields can be used.")
              "code" 101}))))

;; Function to apply stratified split with a given training-rate to the
;; objective field
(define (stratified-split-fn ds-id training-rate objective-field)
  (let (dataset (fetch ds-id)
        ds-name (dataset "name")
        fields (resource-fields dataset)
        _ (check-cat fields objective-field)
        objective-id ((find-field fields objective-field) "id")
        summary (dataset ["fields" objective-id "summary" "categories"] [[]])
        cat-names (map head summary)
        cat-ds-ids (for (cat cat-names)
                     (create-dataset-split
                       (create-dataset {"origin_dataset" ds-id
                                        "lisp_filter" (flatline
                                                        "(= "
                                                        "(f {{objective-id}})"
                                                        " {{cat}})")
                                        "name" (str (dataset "name")
                                                    " - "
                                                    cat)})
                       training-rate
                       "bigml"))
        inner-ds (created-resources)
        ds-ids (map (lambda (ids name)
                      (create-dataset {"origin_datasets" ids
                                       "name" name}))
                    (_transpose cat-ds-ids)
                    [(str ds-name " - train (" (* training-rate 100) "%)")
                     (str ds-name
                          " - test ("
                          (round (* 100 (- 1 training-rate)))
                          "%)")]))
    (wait* ds-ids)
    (map safe-delete inner-ds)
    ds-ids))

(define stratified-split (stratified-split-fn ds-id
                                              training-rate
                                              objective-field))

;; Separate Output Datasets
(define training-ds (head stratified-split))
(define test-ds (stratified-split 1))
